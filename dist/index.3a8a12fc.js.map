{"mappings":"AAAA,aAGA,MAAMA,OAAS,0CAGTC,cAAgB,mCAGhBC,QAAUC,SAASC,cAAc,UACjCC,YAAcF,SAASC,cAAc,eACrCE,cAAgBH,SAASC,cAAc,iBACvCG,aAAeJ,SAASC,cAAc,gBACtCI,cAAgBL,SAASC,cAAc,iBACvCK,KAAON,SAASC,cAAc,SAC9BM,MAAOP,SAASC,cAAc,SAC9BO,KAAOR,SAASC,cAAc,SAC9BQ,KAAOT,SAASC,cAAc,SAC9BS,SAAWV,SAASC,cAAc,iBAClCU,SAAWX,SAASC,cAAc,aAClCW,YAAcZ,SAASC,cAAc,cACrCY,MAAQb,SAASC,cAAc,UAC/Ba,OAASd,SAASC,cAAc,WAChCc,OAASf,SAASC,cAAc,WAChCe,OAAShB,SAASC,cAAc,WAChCgB,OAASjB,SAASC,cAAc,WAChCiB,MAAQlB,SAASC,cAAc,UAqBrC,IAAIkB,kBASKC,SAASC,GACF,UAAVA,EAAEC,MACJD,EAAEE,iBACFC,SAASnB,cAAcoB,OACvBC,cAAcP,UACdd,cAAcoB,MAAQ,aAKjBE,SAASC,YAEPC,IAEP,MAAMC,EAAU,IAAIC,KACdC,EAASF,EAAQG,aACjBC,EAAQJ,EAAQK,YAAcP,EAAKQ,gBAAkB,GAAK,GAAK,GAC/DC,EAAkBC,OAAOJ,EAAMK,QAAQ,IACvCC,EAAOH,EAAkB,EAAI,GAAKA,EAAkBA,EAGpDI,EAAoBD,GAAQ,GAAKA,EAAO,GAAKA,EAKnD,IAAIE,EAAQ,2BACVD,EAAoB,GAAK,IAAMA,EAAoBA,KACjDT,EAAS,GAAK,IAAMA,EAASA,MATZQ,GAAQ,GAAKA,EAAO,GAAKA,IAGjB,GAAK,KAAO,aAQzC/B,KAAKkC,UAAYD,EAnBnBvB,SAAWyB,YAAYf,EAAQ,KAqB/BA,IA1DFlB,SAASkC,iBAAiB,SAAS,WACjCjC,YAAYkC,UAAUC,OAAO,aAiB/B3C,aAAayC,iBAAiB,SAAS,WACrCrB,SAASnB,cAAcoB,OACvBC,cAAcP,aAIhBd,cAAcwC,iBAAiB,UAAWzB,UAyC1C4B,UAAUC,YAAYC,oBACpB,SAAUC,IAKcC,eAAmBC,EAAKC,GAC5C,MAAMC,QAAYC,MAAK,4DACuCH,KAAOC,SAAYzD,UAG3E4D,SADaF,EAAIG,QACCC,QAAQ,GAAGC,mBAAmB,GAAGC,WAEzDrC,SAASiC,GAEXK,CAbiBX,EAASY,OAAOC,SACfb,EAASY,OAAOE,cAcpC,WACEC,QAAQC,IAAI,mCAWhB,IAAIC,MAAQ,SACRC,MAAQ,GACRC,KAAO,UACPC,UAAY,OAEhB,MAAMC,OAAS,WAEC,WAAVJ,OACFA,MAAQ,WACRE,KAAO,UACPC,UAAY,QACZE,OAAOJ,OACP3C,cAAcP,UAEd+C,QAAQC,IAAIC,SAEZA,MAAQ,SACRE,KAAO,UACPC,UAAY,OACZE,OAAOJ,OACP3C,cAAcP,YAIlBT,SAASmC,iBAAiB,QAAS2B,QAEnC,MAAMhD,SAAQ4B,eAAmBsB,GAC/B,IACE,MAAMnB,QAAYC,MAAK,2EACsDkB,6BAAgC7E,UAEvG+B,QAAa2B,EAAIG,OACH,OAAhB9B,EAAK+C,SACPzD,MAAM0D,MAAMC,QAAU,QAEtBC,YAAU,KACR5D,MAAM0D,MAAMC,QAAU,SACrB,MAGL,MAAME,EAAUnD,EAAKoD,WAAW,GAAGC,SACnCZ,MAAQU,EAGRN,OAAOM,GACP,MAAOG,GACPhB,QAAQhD,MAAMgE,KAIZT,OAAMrB,eAAmB+B,GAC7B,IACE,MAAMC,QAAY5B,MAAK,oEAC+C2B,6BAA8BtF,UAE9FwF,QAAaD,EAAI1B,OACvB4B,gBAAgBD,EAAKE,QAGrB,MAAMlC,EAAMgC,EAAKE,OAAOC,SAASC,SAASpC,IACpCqC,EAAML,EAAKE,OAAOC,SAASC,SAASC,IAI1C,IAAIC,EADgBN,EAAKE,OAAOK,OACRC,MAAK,SAAUC,EAAKC,GAC1C,GAAID,EAAIE,MAAQF,EAAIG,QAAU,KAAM,OAAOZ,EAAKE,OAAOK,OAAOG,MAEhEJ,EAAQA,EAAMO,iBAGE9C,eAAmB+C,EAAIC,GACrC,IAGE,MAAM7C,QAAYC,MAAK,uDACkC2C,SAAUC,mCAAoChC,eAAetE,iBAGhH8B,QAAa2B,EAAIG,OAGvB/B,SAASC,GACTyE,YAAYzE,GACZ0E,YAAY1E,EAAK2E,OACjBC,WAAW5E,GACX,MAAOsD,GACPhB,QAAQhD,MAAMgE,KAGlBuB,CAAWpD,EAAKqC,IAEDtC,eAAmBsD,GAChC,IACE,MAAMnD,QAAYC,MAAK,kFAC6DkD,SAAe7G,UAE7F8G,QAAiBpD,EAAIqD,IAG3B7G,QAAQ4C,UAAS,aAAgBgE,OACjC,MAAOzB,GACPhB,QAAQhD,MAAMgE,KAIlB2B,CAAUlB,GACV,MAAOT,GACPhB,QAAQhD,MAAMgE,KAIlB,IAAI4B,SAAW,GACXC,SAAW,GAEf,MAAMzB,gBAAkB,SAAU1D,GAEhCkF,SAAQ,2BAA8BlF,EAAK4D,SAASC,SAASpC,IAAId,QAC/D,OACIX,EAAK4D,SAASC,SAASC,IAAInD,QAAQ,YAEzCwE,SAAQ,2BAA8BnF,EAAKoF,0BAE3C1G,KAAKqC,UAAYmE,SACjBvG,MAAKoC,UAAYoE,UAGbV,YAAc,SAAUzE,GAC5B,IAAIqF,EAAQ,2BAA8BC,OACtB,IAAlBtF,EAAKuF,QAAQC,GAAmC,IAAvBxF,EAAKQ,gBAAyB,MACvDiF,OAAO,wBAET7G,KAAKmC,UAAYsE,GAGbX,YAAc,SAAU1E,GAE5B,IAAI0F,EAAc,GAElB1F,EAAK2F,SAAQ,SAAUC,EAAKzB,GAChB,IAANA,IAEFuB,GADQ,IAANvB,EACS,0IAuBoByB,EAAAC,QAAA,GAAAC,gHAKbF,EAAIG,KAAAH,IAAAjF,QAAA,KAAA+B,uCAwEZkD,EAAYG,KAAAC,MAAArF,QAAkB,KAAA+B,yBAIpB,sDACNuD,OAAAX,OAAA,IAAAM,EAAAJ,IAAAC,OAAA,2EAENG,EAAAC,QAAA,GAAAC,gHAITF,EAAAG,KAAAH,IAAAjF,QAAA,KAAA+B,uCACYkD,EAAAG,KAAAC,MAAArF,QAAA,KAAA+B,yCAGZ3B,UAAA2E,GAEJd,WAAA,SAAA5E","sources":["script.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Google API key for photo and current coords\r\nconst apiKey = \"AIzaSyDZX8IQyuF5VpGmZ6TG7_przQBbM48w6ts\";\r\n\r\n// API key for weather info\r\nconst apiKeyWeather = \"f4928461d9d6b08fe31a2fc25d5a91bd\";\r\n\r\n// Elements\r\nconst photoEl = document.querySelector(\".photo\");\r\nconst infoDailyEl = document.querySelector(\".info-daily\");\r\nconst infoCurrentEl = document.querySelector(\".info-current\");\r\nconst iconSearchEl = document.querySelector(\".icon-search\");\r\nconst inputSearchEl = document.querySelector(\".input-search\");\r\nconst cors = document.querySelector(\".cors\");\r\nconst city = document.querySelector(\".city\");\r\nconst date = document.querySelector(\".date\");\r\nconst time = document.querySelector(\".time\");\r\nconst btnUnits = document.querySelector(\".units-button\");\r\nconst icocMain = document.querySelector(\".main-img\");\r\nconst infoAboutMe = document.querySelector(\".main-info\");\r\nconst invis = document.querySelector(\".invis\");\r\nconst kokot0 = document.querySelector(\".kokot0\");\r\nconst kokot1 = document.querySelector(\".kokot1\");\r\nconst kokot2 = document.querySelector(\".kokot2\");\r\nconst hidden = document.querySelector(\".hidden\");\r\nconst error = document.querySelector(\".error\");\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\nicocMain.addEventListener(\"click\", function () {\r\n  infoAboutMe.classList.toggle(\"hidden\");\r\n});\r\n// icocMain.addEventListener(\"mouseenter\", function () {\r\n//   infoAboutMe.style.opacity = \"1\";\r\n// });\r\n\r\n// infoAboutMe.addEventListener(\"mouseleave\", function () {\r\n//   infoAboutMe.style.opacity = \"0\";\r\n// });\r\n// icocMain.addEventListener(\"mouseout\", function () {\r\n//   setTimeout(() => {\r\n//     infoAboutMe.style.opacity = \"0\";\r\n//   }, 100);\r\n// });\r\n\r\n/////////////////////////////////////////////////////////////\r\nlet interval;\r\niconSearchEl.addEventListener(\"click\", function () {\r\n  showCity(inputSearchEl.value);\r\n  clearInterval(interval);\r\n});\r\n\r\n/////////////////////////////////////////////////////////////\r\ninputSearchEl.addEventListener(\"keydown\", enterKey);\r\n\r\nfunction enterKey(e) {\r\n  if (e.key === \"Enter\") {\r\n    e.preventDefault();\r\n    showCity(inputSearchEl.value);\r\n    clearInterval(interval);\r\n    inputSearchEl.value = \"\";\r\n  }\r\n}\r\n////////////////////////////////////////////////////////////////\r\n\r\nfunction setClock(data) {\r\n  interval = setInterval(oneSec, 1000);\r\n  function oneSec() {\r\n    // console.log(offset);\r\n    const curDate = new Date();\r\n    const minute = curDate.getMinutes();\r\n    const hour1 = curDate.getHours() + (data.timezone_offset / 60 / 60 - 1);\r\n    const noDecimalNumber = Number(hour1.toFixed(0));\r\n    const hour = noDecimalNumber < 1 ? 24 + noDecimalNumber : noDecimalNumber;\r\n    const timeToAMorPM = hour >= 24 ? hour - 24 : hour;\r\n\r\n    const hoursIn12HrFormat = hour >= 13 ? hour % 12 : hour;\r\n    const ampm = timeToAMorPM >= 12 ? \"PM\" : \"AM\";\r\n\r\n    // console.log(hoursIn12HrFormat, minute, second);\r\n\r\n    let timeItem = `<div class=\"time-photo\">${\r\n      hoursIn12HrFormat < 10 ? \"0\" + hoursIn12HrFormat : hoursIn12HrFormat\r\n    }:${minute < 10 ? \"0\" + minute : minute} ${ampm}</div>`;\r\n\r\n    time.innerHTML = timeItem;\r\n  }\r\n  oneSec();\r\n}\r\n\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\n\r\nnavigator.geolocation.getCurrentPosition(\r\n  function (position) {\r\n    const latitude = position.coords.latitude;\r\n    const longitude = position.coords.longitude;\r\n    // console.log(latitude, longitude);\r\n\r\n    const positionByCoords = async function (lat, long) {\r\n      const res = await fetch(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=${apiKey}`\r\n      );\r\n      const data = await res.json();\r\n      const myPosition = data.results[0].address_components[3].short_name;\r\n      // console.log(myPosition);\r\n      showCity(myPosition);\r\n    };\r\n    positionByCoords(latitude, longitude);\r\n  },\r\n  function () {\r\n    console.log(\"Could not get your position!\");\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////\r\nlet units = \"metric\";\r\nlet curId = \"\";\r\nlet unit = \"&#176;C\";\r\nlet unitSpeed = \"km/h\";\r\n\r\nconst change = function () {\r\n  // units = \"imperial\" ? \"metric\" : \"imperial\";\r\n  if (units === \"metric\") {\r\n    units = \"imperial\";\r\n    unit = \"&#176;F\";\r\n    unitSpeed = \"mil/h\";\r\n    showId(curId);\r\n    clearInterval(interval);\r\n\r\n    console.log(units);\r\n  } else {\r\n    units = \"metric\";\r\n    unit = \"&#176;C\";\r\n    unitSpeed = \"km/h\";\r\n    showId(curId);\r\n    clearInterval(interval);\r\n  }\r\n};\r\n\r\nbtnUnits.addEventListener(\"click\", change);\r\n\r\nconst showCity = async function (city) {\r\n  try {\r\n    const res = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${city}&inputtype=textquery&key=${apiKey}`\r\n    );\r\n    const data = await res.json();\r\n    if (data.status !== \"OK\") {\r\n      error.style.display = \"block\";\r\n\r\n      setTimeout(() => {\r\n        error.style.display = \"none\";\r\n      }, 4000);\r\n    }\r\n\r\n    const placeId = data.candidates[0].place_id;\r\n    curId = placeId;\r\n    // console.log(placeId);\r\n\r\n    showId(placeId);\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nconst showId = async function (id) {\r\n  try {\r\n    const res = await fetch(\r\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${id}&inputtype=textquery&key=${apiKey}`\r\n    );\r\n    const data = await res.json();\r\n    curPlaceIntoDOM(data.result);\r\n    // console.log(data);\r\n\r\n    const lat = data.result.geometry.location.lat;\r\n    const lng = data.result.geometry.location.lng;\r\n    // console.log(lat, lng);\r\n\r\n    const photosArray = data.result.photos;\r\n    let photo = photosArray.find(function (mov, i) {\r\n      if (mov.width / mov.height >= 1.41) return data.result.photos[i];\r\n    });\r\n    photo = photo.photo_reference;\r\n    // console.log(photo);\r\n\r\n    const showWeater = async function (lt, lg) {\r\n      try {\r\n        // btnUnits.addEventListener(\"click\", function () {});\r\n\r\n        const res = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${lt}&lon=${lg}&exclude=hourly,minutely&units=${units}&appid=${apiKeyWeather}`\r\n        );\r\n\r\n        const data = await res.json();\r\n        // console.log(data);\r\n\r\n        setClock(data);\r\n        timeIntoDOM(data);\r\n        weekIntoDOM(data.daily);\r\n        dayIntoDOM(data);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n    showWeater(lat, lng);\r\n\r\n    const showPhoto = async function (photoOf) {\r\n      try {\r\n        const res = await fetch(\r\n          `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1600&photo_reference=${photoOf}&key=${apiKey}`\r\n        );\r\n        const urlPhoto = await res.url;\r\n        // console.log(urlPhoto);\r\n\r\n        photoEl.innerHTML = `<img src=\"${urlPhoto}\"/>`;\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    showPhoto(photo);\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nlet corsItem = \"\";\r\nlet cityItem = \"\";\r\n\r\nconst curPlaceIntoDOM = function (data) {\r\n  // console.log(data);\r\n  corsItem = `<div class=\"cors-photo\">${data.geometry.location.lat.toFixed(\r\n    4\r\n  )}N ${data.geometry.location.lng.toFixed(4)}E</div>`;\r\n\r\n  cityItem = `<div class=\"city-photo\">${data.formatted_address}</div>`;\r\n\r\n  cors.innerHTML = corsItem;\r\n  city.innerHTML = cityItem;\r\n};\r\n\r\nconst timeIntoDOM = function (data) {\r\n  let dateItem = `<div class=\"date-photo\">${moment(\r\n    data.current.dt * 1000 + data.timezone_offset * 1000 - 3600\r\n  ).format(\"MMMM Do YYYY\")}</div>`;\r\n\r\n  date.innerHTML = dateItem;\r\n};\r\n\r\nconst weekIntoDOM = function (data) {\r\n  // console.log(data);\r\n  let weatherItem = \"\";\r\n\r\n  data.forEach(function (day, i) {\r\n    if (i === 7) return;\r\n    if (i === 0) {\r\n      weatherItem += `<div class=\"weather-item\">\r\n      <div class=\"day\"><span>Today</span></div>\r\n      <img\r\n        src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\"\r\n        alt=\"icon of weather\"\r\n        class=\"icon-weather\"\r\n      />\r\n      <div class=\"temp\">${day.temp.day.toFixed(1)}${unit}</div>\r\n      <div class=\"temp\">${day.temp.night.toFixed(1)}${unit}</div>\r\n    </div>`;\r\n    } else {\r\n      weatherItem += `<div class=\"weather-item\">\r\n      <div class=\"day\">${window.moment(day.dt * 1000).format(\"ddd\")}</div>\r\n      <img\r\n        src=\"http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png\"\r\n        alt=\"icon of weather\"\r\n        class=\"icon-weather\"\r\n      />\r\n      <div class=\"temp\">${day.temp.day.toFixed(1)}${unit}</div>\r\n      <div class=\"temp\">${day.temp.night.toFixed(1)}${unit}</div>\r\n    </div>`;\r\n    }\r\n  });\r\n  infoDailyEl.innerHTML = weatherItem;\r\n};\r\n\r\nconst dayIntoDOM = function (data) {\r\n  // console.log(data);\r\n  let weatherItemCurrent = `\r\n  <div class=\"current-item current--1\">\r\n               <p class=\"current-temp\">${data.current.temp.toFixed(\r\n                 1\r\n               )}${unit}</p>\r\n                <p class=\"current-feels_like\"><span>feels like:</span> ${data.current.feels_like.toFixed(\r\n                  1\r\n                )}${unit}</p>\r\n              </div>\r\n           <div class=\"current-item current--2\">\r\n            <p class=\"current-description\">${\r\n              data.current.weather[0].description\r\n            }</p>\r\n            <img\r\n              src=\"http://openweathermap.org/img/wn/${\r\n                data.current.weather[0].icon\r\n              }@2x.png\"\r\n              alt=\"icon of weather\"\r\n              class=\"icon-weather--current\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"swiper mySwiper\">\r\n            <div class=\"swiper-wrapper\">\r\n              <div class=\"swiper-slide\"><ul>\r\n              <li class=\"current-feels_like\">\r\n                <span>highest temperature:</span>\r\n                ${data.daily[0].temp.max.toFixed(1)}${unit}\r\n              </li>\r\n              <li class=\"current-feels_like\">\r\n                <span>lowest temperature:</span>\r\n                ${data.daily[0].temp.min.toFixed(1)}${unit}\r\n              </li>\r\n              <li class=\"current-feels_like\"><span>humidity:</span> ${\r\n                data.current.humidity\r\n              }%</li>\r\n              </ul></div>\r\n              <div class=\"swiper-slide\"><ul>\r\n              <li class=\"current-feels_like\"><span>sunrise:</span> ${moment(\r\n                data.current.sunrise * 1000 +\r\n                  data.timezone_offset * 1000 -\r\n                  3600000\r\n              ).format(\"HH:mm a\")}</li>\r\n              <li class=\"current-feels_like\"><span>sunset:</span> ${moment(\r\n                data.current.sunset * 1000 +\r\n                  data.timezone_offset * 1000 -\r\n                  3600000\r\n              ).format(\"HH:mm a\")}</li>\r\n              <li class=\"current-feels_like\"><span>wind speed:</span> ${data.current.wind_speed.toFixed(\r\n                1\r\n              )} ${unitSpeed}</li>\r\n              </ul></div>\r\n              <div class=\"swiper-slide\">\r\n              <ul>\r\n              <li class=\"current-feels_like\"><span>timezone:</span> ${\r\n                data.timezone\r\n              }</li>\r\n               <li class=\"current-feels_like\"><span>timezone offset:</span> UTC ${\r\n                 data.timezone_offset / 60 / 60 > 0\r\n                   ? \"+\" + data.timezone_offset / 60 / 60\r\n                   : data.timezone_offset / 60 / 60\r\n               }</li>\r\n                 <li class=\"current-feels_like\">\r\n                 <span>pressure:</span> ${data.current.pressure} hPa\r\n               </li>\r\n               </ul></div>\r\n            </div>\r\n            <div class=\"swiper-button-next \"></div>\r\n            <div class=\"swiper-button-prev\"></div>\r\n            <div class=\"swiper-pagination\"></div>\r\n          </div>`;\r\n\r\n  infoCurrentEl.innerHTML = weatherItemCurrent;\r\n\r\n  // Swiper.js script :)\r\n\r\n  var swiper = new Swiper(\".mySwiper\", {\r\n    slidesPerView: 1,\r\n    spaceBetween: 30,\r\n    loop: true,\r\n    pagination: {\r\n      el: \".swiper-pagination\",\r\n      clickable: true,\r\n    },\r\n    navigation: {\r\n      nextEl: \".swiper-button-next\",\r\n      prevEl: \".swiper-button-prev\",\r\n    },\r\n  });\r\n};\r\n"],"names":["apiKey","apiKeyWeather","photoEl","document","querySelector","infoDailyEl","infoCurrentEl","iconSearchEl","inputSearchEl","cors","city1","date","time","btnUnits","icocMain","infoAboutMe","invis","kokot0","kokot1","kokot2","hidden","error","interval","enterKey","e","key","preventDefault","showCity","value","clearInterval","setClock","data","oneSec","curDate","Date","minute","getMinutes","hour1","getHours","timezone_offset","noDecimalNumber","Number","toFixed","hour","hoursIn12HrFormat","timeItem","innerHTML","setInterval","addEventListener","classList","toggle","navigator","geolocation","getCurrentPosition","position","async","lat","long","res","fetch","myPosition","json","results","address_components","short_name","positionByCoords","coords","latitude","longitude","console","log","units","curId","unit","unitSpeed","change","showId","city","status","style","display","setTimeout","placeId","candidates","place_id","err","id","res1","data1","curPlaceIntoDOM","result","geometry","location","lng","photo","photos","find","mov","i","width","height","photo_reference","lt","lg","timeIntoDOM","weekIntoDOM","daily","dayIntoDOM","showWeater","photoOf","urlPhoto","url","showPhoto","corsItem","cityItem","formatted_address","dateItem","moment","current","dt","format","weatherItem","forEach","day","weather","icon","temp","night","window"],"version":3,"file":"index.3a8a12fc.js.map"}